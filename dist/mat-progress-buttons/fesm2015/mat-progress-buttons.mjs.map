{"version":3,"file":"mat-progress-buttons.mjs","sources":["../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.injection-token.ts","../../../projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.ts","../../../projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.html","../../../projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.ts","../../../projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.html","../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.module.ts","../../../projects/mat-progress-buttons/src/mat-progress-buttons.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\nexport interface Config extends MatProgressButtonOptions {\n  id?: string;\n}\n\nexport type GlobalConfig = Config[];\n\nexport const GLOBAL_CONFIG = new InjectionToken<GlobalConfig>('Global Config');\n","import {\n  Component,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport {\n  GLOBAL_CONFIG,\n  GlobalConfig,\n} from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-spinner-button',\n  templateUrl: './spinner-button.component.html',\n  styleUrls: ['./spinner-button.component.scss'],\n})\nexport class MatSpinnerButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  public handleClick(event: MouseEvent): boolean {\n    console.log('options', this.options);\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    return false;\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  private mergeObjects(globalOptions: MatProgressButtonOptions, options: MatProgressButtonOptions): void {\n    for (const key in globalOptions) {\n      if (options[key] === undefined) {\n        options[key] = globalOptions[key];\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n    this.mergeObjects(this.globalConfig, this.options);\n  }\n}\n","<button mat-button\n  [type]=\"options.type\"\n  [color]=\"options.buttonColor\"\n  [class.active]=\"options.active\"\n  [class.fullWidth]=\"options.fullWidth\"\n  [class.mat-raised-button]=\"options.raised\"\n  [class.mat-stroked-button]=\"options.stroked\"\n  [class.mat-flat-button]=\"options.flat\"\n  [class.mat-fab]=\"options.fab\"\n  [ngClass]=\"options.customClass\"\n  [disabled]=\"options.active || options.disabled\">\n\n  <ng-container\n    *ngIf=\"options.buttonIcon\">\n    <mat-icon\n      class=\"mat-button-icon\"\n      [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n      [class.active]=\"options.active && !options.disabled\"\n      [ngClass]=\"options.buttonIcon.customClass\"\n      [fontSet]=\"options.buttonIcon.fontSet\"\n      [fontIcon]=\"options.buttonIcon.fontIcon\"\n      [color]=\"options.buttonIcon.color\"\n      [svgIcon]=\"options.buttonIcon.svgIcon\"\n      [inline]=\"options.buttonIcon.inline\">\n      {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span\n    class=\"button-text\"\n    *ngIf=\"!options.fab\"\n    [class.active]=\"options.active && !options.disabled\">\n      {{ options.text }}\n  </span>\n\n  <ng-container\n    *ngIf=\"options.fab && options.icon\">\n    <mat-icon\n      [fontSet]=\"options.icon.fontSet\"\n      [fontIcon]=\"options.icon.fontIcon\"\n      [color]=\"options.icon.color\"\n      [svgIcon]=\"options.icon.svgIcon\"\n      [inline]=\"options.icon.inline\">\n        {{ options.icon.fontSet ? '' : options.icon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <mat-spinner class=\"spinner\"\n    *ngIf=\"options.active && !options.disabled\"\n    [diameter]=\"options.fab ? 58 : options.spinnerSize\"\n    [color]=\"options.spinnerColor\"\n    [mode]=\"options.mode\"\n    [value]=\"options.value\"\n    [class.active]=\"options.active && !options.disabled\">\n  </mat-spinner>\n</button>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport { GLOBAL_CONFIG, GlobalConfig } from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-bar-button',\n  templateUrl: './bar-button.component.html',\n  styleUrls: ['./bar-button.component.scss'],\n})\nexport class MatBarButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  handleClick(event: MouseEvent): void {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.options = { ...this.globalConfig, ...this.options };\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","<button\n  mat-button\n  [type]=\"options.type\"\n  [color]=\"options.buttonColor\"\n  [class.active]=\"options.active\"\n  [class.mat-raised-button]=\"options.raised\"\n  [class.mat-stroked-button]=\"options.stroked\"\n  [class.mat-flat-button]=\"options.flat\"\n  [class.fullWidth]=\"options.fullWidth\"\n  [ngClass]=\"options.customClass\"\n  [disabled]=\"options.active || options.disabled\"\n>\n  <ng-container *ngIf=\"options.buttonIcon\">\n    <mat-icon\n      [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n      [ngClass]=\"options.buttonIcon.customClass\"\n      [fontSet]=\"options.buttonIcon.fontSet\"\n      [fontIcon]=\"options.buttonIcon.fontIcon\"\n      [color]=\"options.buttonIcon.color\"\n      [svgIcon]=\"options.buttonIcon.svgIcon\"\n      [inline]=\"options.buttonIcon.inline\"\n    >\n      {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span>{{ options.text }}</span>\n\n  <mat-progress-bar\n    class=\"bar\"\n    *ngIf=\"options.active && !options.disabled\"\n    [color]=\"options.barColor\"\n    [mode]=\"options.mode\"\n    [value]=\"options.value\"\n  >\n  </mat-progress-bar>\n</button>\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nimport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { GLOBAL_CONFIG, GlobalConfig } from './mat-progress-buttons.injection-token';\n\n// Export module's public API\nexport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nexport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nexport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatIconModule,\n  ],\n  exports: [MatSpinnerButtonComponent, MatBarButtonComponent],\n  declarations: [MatSpinnerButtonComponent, MatBarButtonComponent],\n})\nexport class MatProgressButtonsModule {\n  static forRoot(\n    config?: GlobalConfig\n  ): ModuleWithProviders<MatProgressButtonsModule> {\n    return {\n      ngModule: MatProgressButtonsModule,\n      providers: [{ provide: GLOBAL_CONFIG, useValue: config }],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3"],"mappings":"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"}